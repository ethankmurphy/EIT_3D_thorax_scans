%-------------------------------------------------------------------------------
% 
%   Read the heges ply file
% 
% Format of the header, which nicely gives instructions for how to read it:
% ply
% format binary_little_endian 1.0
% comment Generated by HEGE.SH 1.10
% element vertex     3741399
% property float x
% property float y
% property float z
% property uchar red
% property uchar green
% property uchar blue
% property uchar reserved
% element face     1247133
% property list uchar int vertex_index
% end_header
%
%-------------------------------------------------------------------------------
function [colobj,tri,locs,cols] = read_Heges_ply_v2(dpth,fnm,dbg_flg)

%-------------------------------------------------------------------------------
% Open the file
if isempty(dpth) == 1    
    fid = fopen(fnm);
else
    fid = fopen([dpth,'\',fnm]);
end

%-------------------------------------------------------------------------------
% Read the header and get the number of vertices and faces
for n = 1:14        
    tline = fgets(fid);
    if dbg_flg    
        disp(tline)
    end
    if n == 4
        % tline
        xs  = split(tline);
        nps = str2num(xs{3}); 
    elseif n == 12
        % tline
        ys  = split(tline);
        nel = str2num(ys{3});
    end
end
if dbg_flg == 1
    disp(['Number of vertices: ',num2str(nps)])
    disp(['   Number of faces: ',num2str(nel)])
end
%--------------------------------------------------------------------------
% % % Read the vertices (OLD APPROACH)
% % % locs = zeros(nps,3);
% % % cols = zeros(nps,4);
% % % for n = 1:nps
% % %     if mod(n,100000) == 0
% % %         disp([num2str(n),' of ',num2str(nps)])
% % %     end
% % %     locs(n,:) = fread(fid,[1 3],'float',0,'l');
% % %     cols(n,:) = fread(fid,[1 4],'uchar',0,'l');    
% % % end    
%--------------------------------------------------------------------------
% Float is a 32 bits (4 byte number) - total of 12 bits
% uchar is 8 bits (1 byte) - total of 4 bytes
position = ftell(fid);  % Get the start position
%--------------------------------------------------------------------------
% Scan all the nodes at once
% tic
locs = zeros(nps,3);
for n = 1:3
    disp(['Loading node ',num2str(n),' of 3'])
    % Offset to start at the nth node
    for k = 1:n-1
        tmp       = fread(fid,[1 1],'float');
    end
    locs(:,n) = fread(fid,[nps 1],'float',2*4+4,'l');
    fseek(fid,position,'bof');
end
%--------------------------------------------------------------------------
% Scan all the colors at once
fseek(fid,position,'bof');
cols = zeros(nps,4);
for n = 1:4
    disp(['Loading color ',num2str(n),' of 4'])
    % Offsets to start at the nth color
    tmp       = fread(fid,[1 3],'float');
    for k = 1:n-1        
        tmp       = fread(fid,[1 1],'uchar');
    end
    cols(:,n) = fread(fid,[nps 1],'uchar',3*4+3,'l');
    if n < 4    
        fseek(fid,position,'bof');
    end
end
position = ftell(fid);  % Get the start position
toc

%--------------------------------------------------------------------------
% Read the elements
%--------------------------------------------------------------------------
% Skip the first 10 elements
% tic
for n = 1:10
    A_uchar = fread(fid,1,'uchar',0,'l');
    for j = 1:A_uchar
        tri(n,j) = fread(fid,1,'int',0,'l');
    end
end
%--------------------------------------------------------------------------
% Quickly read the rest
% 'int' is 32 bits, 4 bytes
nel = nel-21;
pos_elreturn = ftell(fid);  % Get the start position
tri      = zeros(nel,3);
for n = 1:3
    disp(['Loading element ',num2str(n),' of 3'])
    % Offsets to start at the nth color
    tmp       = fread(fid,1,'uchar',0,'l');
    for k = 1:n-1        
        tmp       = fread(fid,1,'int',0,'l');
    end
    dattmp = fread(fid,[nel 1],'int',2*4+1,'l');    
    tri(:,n) = dattmp;    
    fseek(fid,pos_elreturn,'bof');    
end
tri = tri+1; % Add 1, because the counting started at zero
toc

% % %--------------------------------------------------------------------------
% % % Read the triangles/faces (OLD Version)
% % tic
% % fseek(fid,position,'bof');    
% % tic
% % tri     = zeros(nel,3);
% % trisiz  = zeros(nel,1);
% % for n = 1:nel-1 % while feof(fid) == 0
% %     if mod(n,100000) == 0
% %         disp([num2str(n),' of ',num2str(nel)])
% %     end
% %     A_uchar = fread(fid,1,'uchar',0,'l');
% %     try
% %         trisiz(n) = A_uchar;
% %         for j = 1:trisiz(n)
% %             tri(n,j) = fread(fid,1,'int',0,'l');
% %         end
% %     catch
% %         disp(['issue with first character: ', num2str(n),' of ',num2str(nel)])
% %         A_uchar
% %     end
% % end
% % toc
%---------------------
% % tri = tri(:,1:3)+1;     % Add 1, because the counting started at zero
% % %--------------------------------------------------------------------------
% % % Reduce to only 3-element triangles
% % is3el = find(trisiz==3);    
% % tri   = tri(is3el,:);

%--------------------------------------------------------------------------
% Return the points and colors as a point cloud object
colobj = pointCloud(locs, 'Color', uint8(cols(:,1:3)));


%-------------------------------------------------------------------------------
if dbg_flg == 1
    disp(['Number of vertices: ',num2str(nps)])
    disp(['   Number of faces: ',num2str(nel)])
    % % disp(['      actual faces: ',num2str(length(is3el))])
    % % disp(['       Werid start: ',num2str(min(is3el))])
    % % disp(['       Left at end: ',num2str(nel-max(is3el) )])
    % %     figure
    % %     plot(trisiz)
    figure
    plot3(locs(:,1),locs(:,2),locs(:,3),'.k','markersize',5)
    figure
    pcshow(colobj)
    figure
    trisurf(tri(:,1:3),locs(:,1),locs(:,2),locs(:,3),'facecolor','cyan','linestyle','none')
    camlight left
   
    
end